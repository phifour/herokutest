{"version":3,"sources":["app/todo/components/histogram.component.ts"],"names":[],"mappings":"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","file":"histogram.component.js","sourcesContent":["import { Component, OnInit, Input, OnChanges, SimpleChange  } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-histogram',\r\n    template: `\r\n    <h5> {{title}} </h5>\r\n    <div *ngIf=\"values.length > 0\" id=\"histogram\"></div>\r\n    <div *ngIf=\"values.length < 1\">\r\n        <h5>No data for histogram</h5>\r\n    </div>\r\n  `,\r\n   styles: [`\r\n        body {\r\n        font: 10px sans-serif;\r\n        }\r\n\r\n        .bar rect {\r\n        shape-rendering: crispEdges;\r\n        }\r\n\r\n        .bar text {\r\n        fill: #999999;\r\n        }\r\n\r\n        .axis path, .axis line {\r\n        fill: none;\r\n        stroke: #000;\r\n        shape-rendering: crispEdges;\r\n        }\r\n    `]\r\n})\r\n\r\nexport class HistogramComponent implements OnInit {\r\n\r\n    // @Input() usedates: number;\r\n    @Input() title: string;\r\n    @Input() values: number[];\r\n\r\n\r\n    ngOnChanges(changes: {[propKey: string]: SimpleChange}) {\r\n        let log: string[] = [];\r\n        this.update();\r\n        this.initgraph();\r\n        console.log('changes in histogram',changes);\r\n        // for (let propName in changes) {\r\n        //     console.log('changes',changes);\r\n        // // let changedProp = changes[propName];\r\n        // // let from = JSON.stringify(changedProp.previousValue);\r\n        // // let to =   JSON.stringify(changedProp.currentValue);\r\n        // // log.push( `${propName} changed from ${from} to ${to}`);\r\n        // }\r\n    }\r\n\r\n\r\n    update() {\r\n        d3.select(\"#histogram\").selectAll(\"*\").remove();\r\n    }\r\n\r\n\r\n    initgraph() {\r\n            var color = \"steelblue\";\r\n\r\n            // Generate a 1000 data points using normal distribution with mean=20, deviation=5\r\n            //var values = d3.range(1000).map(d3.random.normal(20, 5));\r\n\r\n            // A formatter for counts.\r\n            var formatCount = d3.format(\",.0f\");\r\n\r\n            var w = 480;\r\n            var h = 250;\r\n\r\n            var margin = {top: 20, right: 30, bottom: 30, left: 30};\r\n            var width = w - margin.left - margin.right;\r\n            var height = h - margin.top - margin.bottom;\r\n\r\n            var max = d3.max(this.values);\r\n            var min = d3.min(this.values);\r\n            var x = d3.scale.linear()\r\n                .domain([min, max])\r\n                .range([0, width]);\r\n\r\n            // Generate a histogram using twenty uniformly-spaced bins.\r\n            var data = d3.layout.histogram()\r\n                .bins(x.ticks(20))\r\n                (this.values);\r\n\r\n            var yMax = d3.max(data, function(d) {return d.length;});\r\n            var yMin = d3.min(data, function(d) {return d.length;});\r\n            var colorScale = d3.scale.linear()\r\n                .domain([yMin, yMax])\r\n                .range([d3.rgb(color).brighter(), d3.rgb(color).darker()]);\r\n\r\n            var y = d3.scale.linear()\r\n                .domain([0, yMax])\r\n                .range([height, 0]);\r\n\r\n            var xAxis = d3.svg.axis()\r\n                .scale(x)\r\n                .orient(\"bottom\");\r\n\r\n            var svg = d3.select(\"#histogram\").append(\"svg\")\r\n                .attr(\"width\", width + margin.left + margin.right)\r\n                .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n                .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n            var bar = svg.selectAll(\".bar\")\r\n                .data(data)\r\n            .enter().append(\"g\")\r\n                .attr(\"class\", \"bar\")\r\n                .attr(\"transform\", function(d) { return \"translate(\" + x(d.x) + \",\" + y(d.y) + \")\"; });\r\n\r\n            bar.append(\"rect\")\r\n                .attr(\"x\", 1)\r\n                .attr(\"width\", (x(data[0].dx) - x(0)) - 1)\r\n                .attr(\"height\", function(d) { return height - y(d.y); })\r\n                .attr(\"fill\", function(d) { return colorScale(d.y); });\r\n\r\n            bar.append(\"text\")\r\n                .attr(\"dy\", \".75em\")\r\n                .attr(\"y\", -12)\r\n                .attr(\"x\", (x(data[0].dx) - x(0)) / 2)\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .text(function(d) { return formatCount(d.y); });\r\n\r\n            svg.append(\"g\")\r\n                .attr(\"class\", \"x axis\")\r\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n                .call(xAxis);\r\n    }\r\n\r\n    ngOnInit() {\r\n         this.initgraph();\r\n         //this.title = \"Hello World!\";\r\n         //this.update();\r\n    }\r\n\r\n\r\n    }\r\n"],"sourceRoot":"/src"}