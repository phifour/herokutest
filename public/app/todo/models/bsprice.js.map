{"version":3,"sources":["app/todo/models/bsprice.ts"],"names":[],"mappings":";;;;;;;YACA;gBAII,iBAAY,GAAU;oBAClB,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC;gBACjB,CAAC;gBAED,qBAAG,GAAH,UAAI,CAAC;oBACL,8DAA8D;oBAC9D,gCAAgC;oBAChC,8EAA8E;oBAC9E,mGAAmG;oBACnG,IAAI,CAAC,GAAG,IAAI,CAAC;oBACb,IAAI,CAAC,GAAG,IAAI,CAAC;oBACb,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;oBAClB,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;wBACzB,CAAC,IAAI,CAAC,CAAC;wBACP,CAAC,IAAI,CAAC,CAAC,CAAC;wBACR,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;oBACpE,CAAC;oBACD,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAC7C,CAAC;gBAID,oBAAE,GAAF,UAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC;oBACjB,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,GAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAE,CAAC,CAAC,GAAC,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChF,CAAC;gBAED,oBAAE,GAAF,UAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC;oBACjB,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,GAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnF,CAAC;gBAED,8BAAY,GAAZ,UAAa,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC;oBAC3B,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;gBACrH,CAAC;gBAOL,cAAC;YAAD,CA3CA,AA2CC,IAAA;YA3CD,6BA2CC,CAAA","file":"bsprice.js","sourcesContent":["import { Option } from \"./option\";\r\nexport class BSPrice {\r\n\r\n    public o:Option;\r\n\r\n    constructor(opt:Option) {\r\n        this.o = opt;\r\n    }\r\n\r\n    erf(x) {\r\n    // erf(x) = 2/sqrt(pi) * integrate(from=0, to=x, e^-(t^2) ) dt\r\n    // with using Taylor expansion, \r\n    //        = 2/sqrt(pi) * sigma(n=0 to +inf, ((-1)^n * x^(2n+1))/(n! * (2n+1)))\r\n    // calculationg n=0 to 50 bellow (note that inside sigma equals x when n = 0, and 50 may be enough)\r\n    var m = 1.00;\r\n    var s = 1.00;\r\n    var sum = x * 1.0;\r\n    for(var i = 1; i < 50; i++) {\r\n        m *= i;\r\n        s *= -1;\r\n        sum += (s * Math.pow(x, 2.0 * i + 1.0)) / (m * (2.0 * i + 1.0));\r\n    }  \r\n    return 2 * sum / Math.sqrt(3.14159265358979);\r\n    }\r\n\r\n\r\n\r\n    d1(S0, K, r, sigma, T) {\r\n        return (Math.log(S0/K) + (r + (sigma*sigma) / 2)* T)/(sigma * Math.sqrt(T));\r\n    }\r\n\r\n    d2(S0, K, r, sigma, T) {\r\n        return (Math.log(S0/K) + (r - (sigma*sigma) / 2) * T) / (sigma * Math.sqrt(T));\r\n    }\r\n\r\n    EuropeanCall(S0, K, r, sigma, T) {\r\n        return S0 * this.erf(this.d1(S0, K, r, sigma, T)) - K * Math.exp(-r * T) * this.erf(this.d2(S0, K, r, sigma, T));\r\n    }\r\n    \r\n    // BlackScholes(type,S0, K, r, sigma, T):\r\n    // if type==\"C\":\r\n        \r\n    // else:\r\n    //    return K * np.exp(-r * T) * ss.norm.cdf(-d2(S0, K, r, sigma, T)) - S0 * ss.norm.cdf(-d1(S0, K, r, sigma, T))\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":"/src"}