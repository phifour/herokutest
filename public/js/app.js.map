{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/app.js","src/js/ctrl/dataview.controller.js","src/js/ctrl/geospatial.controller.js","src/js/ctrl/keymetrics.controller.js","src/js/ctrl/main.controller.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var app = angular.module('app', ['ui.router', 'ui.bootstrap', 'firebase', 'ngCookies','uiGmapgoogle-maps','nvd3','ngTable']);//, \r\n\r\napp.config(['$stateProvider', '$urlRouterProvider',\r\n    function ($stateProvider, $urlRouterProvider) {\r\n\r\n        //Problem with injection\r\n        //,$stateParams\r\n\r\n        // For unmatched routes\r\n        $urlRouterProvider.otherwise('/');\r\n\r\n        // Application routes\r\n        $stateProvider\r\n            .state('index', {\r\n                url: '/',\r\n                templateUrl: 'layouts/dashboard.html'\r\n            })\r\n            .state('data', {\r\n                url: '/data',\r\n                templateUrl: 'layouts/data.html'\r\n            })\r\n            .state('keymetrics', {\r\n                url: '/keymetrics',\r\n                templateUrl: 'layouts/keymetrics.html'\r\n            })            \r\n    }\r\n]);\r\n\r\n/**\r\n * Widget Header Directive\r\n */\r\n\r\napp.directive('rdWidgetHeader', rdWidgetTitle);\r\n\r\nfunction rdWidgetTitle() {\r\n    var directive = {\r\n        requires: '^rdWidget',\r\n        scope: {\r\n            title: '@',\r\n            icon: '@'\r\n        },\r\n        transclude: true,\r\n        template: '<div class=\"widget-header\"><div class=\"row\"><div class=\"pull-left\"><i class=\"fa\" ng-class=\"icon\"></i> {{title}} </div><div class=\"pull-right col-xs-6 col-sm-4\" ng-transclude></div></div></div>',\r\n        restrict: 'E'\r\n    };\r\n    return directive;\r\n};\r\n\r\napp.directive('rdWidgetFooter', rdWidgetFooter);\r\n\r\nfunction rdWidgetFooter() {\r\n    var directive = {\r\n        requires: '^rdWidget',\r\n        transclude: true,\r\n        template: '<div class=\"widget-footer\" ng-transclude></div>',\r\n        restrict: 'E'\r\n    };\r\n    return directive;\r\n};\r\n\r\n\r\napp.directive('rdWidgetBody', rdWidgetBody);\r\n\r\nfunction rdWidgetBody() {\r\n    var directive = {\r\n        requires: '^rdWidget',\r\n        scope: {\r\n            loading: '@?',\r\n            classes: '@?'\r\n        },\r\n        transclude: true,\r\n        template: '<div class=\"widget-body\" ng-class=\"classes\"><rd-loading ng-show=\"loading\"></rd-loading><div ng-hide=\"loading\" class=\"widget-content\" ng-transclude></div></div>',\r\n        restrict: 'E'\r\n    };\r\n    return directive;\r\n};\r\n\r\napp.directive('rdWidget', rdWidget);\r\n\r\nfunction rdWidget() {\r\n    var directive = {\r\n        transclude: true,\r\n        template: '<div class=\"widget\" ng-transclude></div>',\r\n        restrict: 'EA'\r\n    };\r\n    return directive;\r\n\r\n    function link(scope, element, attrs) {\r\n        /* */\r\n    }\r\n};\r\n\r\napp.directive('rdLoading', rdLoading);\r\n\r\nfunction rdLoading() {\r\n    var directive = {\r\n        restrict: 'AE',\r\n        template: '<div class=\"loading\"><div class=\"double-bounce1\"></div><div class=\"double-bounce2\"></div></div>'\r\n    };\r\n    return directive;\r\n};\r\n\r\n","app.controller('DataViewCtrl', ['$scope', '$element', '$window', '$http', '$interval', 'NgTableParams', DataViewCtrl]);\r\n\r\nfunction DataViewCtrl($scope, $element, $window, $http, $interval, NgTableParams) {\r\n\r\n    var update_interval = 3000;\r\n\r\n    var mobileView = 992;\r\n\r\n    $scope.dataupdate = false;\r\n\r\n    $scope.mobiletable = [];\r\n\r\n    $scope.iframeHeight = window.innerHeight;\r\n\r\n\r\n    var w = angular.element($window);\r\n    $scope.$watch(\r\n        function () {\r\n            return $window.innerWidth;\r\n        },\r\n        function (value) {\r\n            $scope.windowWidth = value;\r\n        },\r\n        true\r\n        );\r\n\r\n    w.bind('resize', function () {\r\n        $scope.$apply();\r\n    });\r\n\r\n\r\n    $scope.issuesclosed = 0;\r\n    $scope.issuesopen = 0;\r\n\r\n    var init_load = false;\r\n\r\n    function loaddata() {\r\n\r\n        $scope.dataupdate = false;\r\n\r\n        d3.csv(\"data/issues.csv\", function (d) {\r\n            return {\r\n                customername: d['Customer name'],\r\n                subtimestamp: Date.parse(d['Submission Timestamp']),\r\n                email: d['customer email address'],\r\n                description: d['Description'],\r\n                status: d['Status'],\r\n                closedtimestamp: Date.parse(d['Closed Timestamp']),\r\n                employeename: d['Employee name']\r\n            };\r\n        }, function (data) {\r\n            $scope.issuesclosed = 0;\r\n            $scope.issuesopen = 0;\r\n            for (var i = 0; i < data.length; i++) {\r\n                if (data[i].status == \"Closed\") {\r\n                    $scope.issuesclosed = $scope.issuesclosed + 1;\r\n                    console.log('Issue open', $scope.issuesclosed);\r\n                } else {\r\n                    $scope.issuesopen = $scope.issuesopen + 1;\r\n                }\r\n            }\r\n\r\n            $scope.mobiletable = data;\r\n\r\n            console.log('Data!!!', data);\r\n\r\n            $scope.tp = new NgTableParams({}, { dataset: data });\r\n        });\r\n\r\n    };\r\n\r\n    $scope.callAtInterval = loaddata;\r\n      \r\n    //init load of data at program start \r\n    if (init_load == false) {\r\n        loaddata();\r\n        init_load = true;\r\n    }\r\n\r\n    var stopTime = $interval(function () { $scope.callAtInterval(); }, update_interval, false);\r\n\r\n    $element.on('$destroy', function () {\r\n        $interval.cancel(stopTime);\r\n    });\r\n\r\n\r\n}","app.controller('GeoSpatialCtrl', ['$scope', '$element', '$http', '$interval', 'NgTableParams', GeoSpatialCtrl]);\r\n\r\nfunction GeoSpatialCtrl($scope, $element, $http, $interval, NgTableParams) {\r\n    \r\n    var update_interval = 3000;\r\n\r\n    $scope.dataupdate = false;\r\n\r\n    $scope.map = { center: { latitude: 48.20705775, longitude: 16.38044357 }, zoom: 8 };\r\n\r\n    $scope.places = [];\r\n    \r\n    function loaddata() {\r\n        \r\n        $scope.dataupdate = false;\r\n        \r\n        $http.get(\"data/stations.json\").then(function (response) {\r\n            return response.data.stations;\r\n        }).then(function (places) {\r\n\r\n            if ($scope.places.length != places.length) {\r\n                $scope.dataupdate = !$scope.dataupdate;\r\n            } else {\r\n\r\n                if ($scope.places.length > 0) {\r\n                    for (var i = 0; i < places.length; i++) {\r\n                        if (places[i].title != $scope.places[i].title){\r\n                            console.log('$scope.places[i]xx',$scope.places[i]);\r\n                            console.log('NE check',places[i].title,$scope.places[i].title);\r\n                            $scope.dataupdate = true;\r\n                        }\r\n                        if (places[i].employees != $scope.places[i].employees) {\r\n                            $scope.dataupdate = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            console.log('$scope.dataupdate',$scope.dataupdate);\r\n\r\n            for (var i = 0; i < places.length; i++) {\r\n                places[i]['options'] = { labelClass: 'labels', labelAnchor: '12 60', labelContent: places[i].title + ' , employees: ' + places[i].employees };\r\n            }\r\n\r\n            $scope.places = places;\r\n        });\r\n    }\r\n\r\n    $scope.callAtInterval = loaddata;\r\n\r\n    var stopTime = $interval(function () { $scope.callAtInterval(); }, update_interval, false);\r\n\r\n    $element.on('$destroy', function () {\r\n        $interval.cancel(stopTime);\r\n    });\r\n\r\n\r\n\r\n\r\n}","app.controller('KeyMetricsCtrl', ['$scope', '$element', '$http', '$interval', 'NgTableParams', '$firebaseArray',  KeyMetricsCtrl]);\r\n\r\nfunction KeyMetricsCtrl($scope, $element, $http, $interval, NgTableParams, $firebaseArray) {\r\n\r\n    var update_interval = 3000;\r\n\r\n    var mobileView = 992;\r\n    \r\n    var ref = new Firebase(\"https://flickering-inferno-6917.firebaseio.com/temperature\");\r\n\r\n    var temp = $firebaseArray(ref);\r\n\r\n    var sin = [];\r\n\r\n     // to take an action after the data loads, use the $loaded() promise\r\n     temp.$loaded().then(function() {\r\n        console.log(\"loaded record:\", temp);\r\n        loaddata();\r\n       // To iterate the key/value pairs of the object, use angular.forEach()\r\n     });\r\n\r\n    //Data is represented as an array of {x,y} pairs.\r\n    for (var i = 0; i < 100; i++) {\r\n        sin.push([i, Math.sin(i/10)]);\r\n    }\r\n\r\n\r\n    $scope.dataupdate = false;\r\n\r\n    var init_load = false;\r\n\r\n    $scope.data2 = [\r\n        {\r\n            \"values\": sin,      //values - represents the array of {x,y} data points\r\n            key: 'Living Room Temp.', //key  - the name of the series.\r\n            color: '#ff7f0e',  //color - optional: choose your own line color.\r\n            strokeWidth: 3,\r\n            classed: 'dashed'\r\n        }\r\n    ];\r\n\r\n    function loaddata() {\r\n        $scope.dataupdate = false;\r\n        console.log(\"loaded record:\", temp);\r\n        $scope.data2[0].values = [];\r\n\r\n     for (var i=0;i<temp.length;i++){\r\n         //console.log(temp[i]['room temperature']);\r\n         console.log('date',Date.parse('2015 April 4'));\r\n         //$scope.data2[0].values.push([Date.parse('2015 April 4'),23]);\r\n         //$scope.data2[0].values.push([Date.parse('2015 April 5'),24]);\r\n         //$scope.data2[0].values.push([Date.parse('2015 April 6'),25]);\r\n         //$scope.data2[0].values.push([Date.parse('2015 April 7'),27]);\r\n         // var d = Date.parse('2015 April 4');\r\n         var temperature = temp[i]['temperature'];        \r\n         console.log([i, temperature]);\r\n         $scope.data2[0].values.push([i, temperature]);\r\n     }\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n//    $scope.callAtInterval = loaddata;\r\n      \r\n    //init load of data at program start \r\n    // if (init_load == false) {\r\n    //     loaddata();\r\n    //     init_load = true;\r\n    // }\r\n\r\n    //var stopTime = $interval(function () { $scope.callAtInterval(); }, update_interval, false);\r\n\r\n    $scope.options2 = {\r\n        chart: {\r\n            type: 'lineChart',\r\n            height: 450,\r\n            margin: {\r\n                top: 20,\r\n                right: 20,\r\n                bottom: 80,\r\n                left: 55\r\n            },\r\n            x: function (d) { return d[0]; },\r\n            y: function (d) { return d[1]; },\r\n            useInteractiveGuideline: true,\r\n            dispatch: {\r\n                stateChange: function (e) { console.log(\"stateChange\"); },\r\n                changeState: function (e) { console.log(\"changeState\"); },\r\n                tooltipShow: function (e) { console.log(\"tooltipShow\"); },\r\n                tooltipHide: function (e) { console.log(\"tooltipHide\"); }\r\n            },\r\n            xAxis: {\r\n                axisLabel: 'Time',\r\n                tickFormat: function (d) {\r\n                    //return d3.time.format('%x')(new Date(d))\r\n                    return d3.format(',.1f')(d);\r\n\r\n                },\r\n                rotateLabels: 30,\r\n                showMaxMin: false\r\n            },\r\n            yAxis: {\r\n                axisLabel: 'Temperature C°',\r\n                axisLabelDistance: -10,\r\n                tickFormat: function (d) {\r\n                    return d3.format(',.1f')(d);\r\n                }\r\n            },\r\n\r\n\r\n            callback: function (chart) {\r\n                // console.log(\"!!! lineChart callback !!!\");\r\n            },\r\n            zoom: {\r\n                enabled: true,\r\n                scaleExtent: [1, 20],\r\n                useFixedDomain: false,\r\n                useNiceScale: false,\r\n                horizontalOff: false,\r\n                verticalOff: true,\r\n                unzoomEventType: 'dblclick.zoom'\r\n            }\r\n        },\r\n        title: {\r\n            enable: true,\r\n            text: 'Temperature'\r\n        }\r\n    };\r\n\r\n        //  $element.on('$destroy', function() {\r\n        //     $interval.cancel(stopTime);\r\n        //   });\r\n\r\n}","app.controller('MainCtrl', ['$scope', '$cookieStore', MainCtrl]);\r\n\r\nfunction MainCtrl($scope, $cookieStore) {\r\n    /**\r\n     * Sidebar Toggle & Cookie Control\r\n     */\r\n\r\n    var mobileView = 992;\r\n\r\n    $scope.getWidth = function () {\r\n        return window.innerWidth;\r\n    };\r\n\r\n    $scope.$watch($scope.getWidth, function (newValue, oldValue) {\r\n        if (newValue >= mobileView) {\r\n            if (angular.isDefined($cookieStore.get('toggle'))) {\r\n                $scope.toggle = !$cookieStore.get('toggle') ? false : true;\r\n            } else {\r\n                $scope.toggle = true;\r\n            }\r\n        } else {\r\n            $scope.toggle = false;\r\n        }\r\n\r\n    });\r\n\r\n    $scope.toggleSidebar = function () {\r\n        $scope.toggle = !$scope.toggle;\r\n        $cookieStore.put('toggle', $scope.toggle);\r\n    };\r\n\r\n    window.onresize = function () {\r\n        $scope.$apply();\r\n    };\r\n}"],"preExisting":"//# sourceMappingURL=data:application/json;base64,"}